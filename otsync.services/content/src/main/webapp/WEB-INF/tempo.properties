#This is the URL to the User Interface Repository
#repo=

#It is important to change this to something unguessable and set the same value in the Tempo module notifier
#This value also determines cluster membership for backchannel and client wipe messages (a multicast port and address is derived from this key)
NotifyChannelSharedKey=tempo

#This is the base Content Server URL that Tempo Engine will use to connect, e.g. http://cs-servername If using NTLM authentication for users, this must be an alternate URL that does not prompt for #authentication at the webserver layer, e.g. http://cs-servername:8888 (see also ContentServerRelativeURL)
ContentServerBaseURL=https://localhost

#This is the base Content Server URL that end users will use to connect, e.g. http://cs-servername
ContentServerDirectBaseURL=https://localhost

#This is the relative content server url that Tempo Engine will use to connect, e.g. /OTCS/cs.exe If using NTLM authentication for users, this must be an alternate URL that does not prompt for authentication #at the webserver layer, e.g. /OTCSadmin/cs.exe
ContentServerRelativeURL=/OTCS/cs.exe

#This is the relative content server url that end users will use to connect, e.g. /OTCS/cs.exe
ContentServerDirectRelativeURL=/OTCS/cs.exe

#This is a comma separated list of valid Content Server request prefixes
ValidURLWhiteList=?func=user.GetPhoto, /img/socialfeed/images, /pulse/photos/

#To use an OpenText client tracking server, configure the url and instance name here.
#The tracker instance must be configured with the same key as this Engine (NotifyChannelSharedKey, above)
#Connection pool size and timeout (for getting a connection and reading from a socket) for tracker
#communication may also be configured if desired.
#The url must end with a '/'
#tracker.url=https://localhost:8080/tracker/
#tracker.instance=default
#tracker.connections.max=128
#tracker.connection.timeout=5000

#The external invite db can be configured for a cluster by specifying jdbcConnectionString in the tempo.properties file. 
#MSSQL and Oracle dbs are supported, using a connection string that includes the username and password; comment out the line below for your database.
#The user and tablespace/db must exist, and can be created in the same way that a db for tracker is created. 
#In fact, it would make sense to use the very same db and credentials.
#MSSQL:
#jdbcConnectionString=jdbc:sqlserver://db.example.com:1433;databaseName=westmount;user=tempo;password=xxxx
#Oracle:
#jdbcConnectionString=jdbc:oracle:thin:username/password@<hostname>:1521:ORCL

#This is where temporary files will be stored for chunked uploads/downloads (remember trailing slash!)( use forward slash or double back slash)
TempfileDir=C:/temp/

#The maximum request time for all async requests sent to this Engine, and for all requests aside from uploads and downloads sent
#to Content Server, in milliseconds
request.timeout=120000

#The maximum time the Engine will wait for a Content Server to begin responding to an upload request after all data has been sent, in milliseconds
upload.socket.timeout=1200000

#The connection timeout for attempts by this Engine to contact Content Server, in milliseconds
cs.connection.timeout=15000

#Maximum number of connections to open between this Engine and Content Server
cs.connections.max=2048

#Maximum number of Content Server threads to use for automated sync actions, including desktop client full sync and desktop client download
cs.syncthreads.max=32

#This is the number of threads handling notifications from the Content Server Tempo module
NotifyThreadPoolSize=32

## Clustering properties. These affect broadcasting of backchannel and client wipe notifications. The defaults will generally be acceptable.
## frequency of multicasts, in ms
#cluster.frequency=1000
## ip address on which this node should receive broadcast messages. On Linux systems, it may be necessary to set this value if
## the catalina log reports that the receiver server socket is bound to 127.0.0.1 (alternatively, the localhost ip address can be changed in /etc/hosts)
#cluster.receiver.address=auto
## the port at which the Engine starts scanning for an available port for incoming broadcast messages. It will automatically search up to 100 addresses starting
## with this one in an attempt to find a free port. This setting can be used if the auto-scan fails, or if a different port is desired because of firewall
## configuration.
#cluster.receiver.port=4000

#This is the size of the chunks for chunked uploading/downloading
ChunkSize=65536

#This is the amount of time it takes in seconds before a download/upload request will be deemed orphaned and thus removed from the engine. Request timestamps are renewed on each chunk request.
ChunkedContentCacheExpiryTime=600

#This is how long, in milliseconds, a back-channel token will be accepted (provided this engine has not sent a new token to that client)
BackChannelTokenTimeout=7200000

#This is the number of clients a user can have registered with the engine at one time.
MaxClientsPerUser=100000

#The time in seconds of how old a client has to be before it is discarded.
ClientTimeOut=86400

#The time in seconds between cleanups of stale clients and orphaned temporary files.
CleanUpInterval=3600

#Set to true for per-request logging on the front-channel, including queue depth
WantFrontChannelLogs=false

#Set to false to work around Chrome user-agent string not being recognized by CS (results in odd download filename)
ShouldForwardChromeUserAgent=false

###Tempo Invite Parameters

com.opentext.tempoinvite.mail.smtp.host=localhost

com.opentext.tempoinvite.mail.smtp.port=25

#com.opentext.tempoinvite.mail.smtp.username=

#com.opentext.tempoinvite.mail.smtp.password=

com.opentext.tempoinvite.mail.smtp.ssl=false

com.opentext.tempoinvite.mail.smtp.from=tempo@example.com

com.opentext.tempoinvite.opentext.webappurl=https://tempo.example.com:8443/tempo